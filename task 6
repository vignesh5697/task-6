from sklearn.ensemble import IsolationForest

# Initialize the model
iso_forest = IsolationForest(contamination=0.01)  # Adjust contamination according to your dataset

# Fit the model
iso_forest.fit(X_train)

# Predict anomalies
y_pred = iso_forest.predict(X_test)
from sklearn.neighbors import LocalOutlierFactor

# Initialize the model
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)

# Predict anomalies
y_pred = lof.fit_predict(X_test)
import tensorflow as tf
from tensorflow.keras import layers, models

# Define the autoencoder model
input_dim = X_train.shape[1]
encoding_dim = 14  # This can be adjusted

input_layer = layers.Input(shape=(input_dim,))
encoder = layers.Dense(encoding_dim, activation="tanh")(input_layer)
encoder = layers.Dense(int(encoding_dim / 2), activation="relu")(encoder)

decoder = layers.Dense(encoding_dim, activation='tanh')(encoder)
decoder = layers.Dense(input_dim, activation='relu')(decoder)

autoencoder = models.Model(inputs=input_layer, outputs=decoder)

# Compile the model
autoencoder.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
autoencoder.fit(X_train, X_train, epochs=50, batch_size=32, shuffle=True, validation_split=0.2)

# Predict anomalies
reconstructions = autoencoder.predict(X_test)
mse = tf.keras.losses.mean_squared_error(X_test, reconstructions)
y_pred = mse > threshold  # Define an appropriate threshold
from sklearn.metrics import confusion_matrix, roc_auc_score, precision_recall_curve

# Example for confusion matrix
cm = confusion_matrix(y_test, y_pred)

# ROC-AUC
roc_auc = roc_auc_score(y_test, y_pred)

# Precision-Recall Curve
precision, recall, thresholds = precision_recall_curve(y_test, y_pred)
